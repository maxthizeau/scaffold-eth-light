/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LotteryFactory,
  LotteryFactoryInterface,
} from "../LotteryFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "_getAllBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_drawId",
        type: "uint256",
      },
    ],
    name: "_getDrawToTickets",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ticketId",
        type: "uint256",
      },
    ],
    name: "_getTicket",
    outputs: [
      {
        components: [
          {
            internalType: "uint8[5]",
            name: "numbers",
            type: "uint8[5]",
          },
          {
            internalType: "uint256",
            name: "drawNumber",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct LotteryFactory.Ticket",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "_getTicketsByOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "buyMultipleRandomTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "drawToTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newPrice",
        type: "uint256",
      },
    ],
    name: "setTicketPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ticketToOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tickets",
    outputs: [
      {
        internalType: "uint256",
        name: "drawNumber",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526611c37937e08000600255600060035560006004556000600555600060065534801561002f57600080fd5b506100393361003e565b61008e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e9c8061009d6000396000f3fe6080604052600436106100f35760003560e01c80635d091f381161008a578063b12e29df11610059578063b12e29df146102e3578063c6f6d9d914610303578063efff5e2f14610319578063f2fde38b1461032e57600080fd5b80635d091f3814610270578063715018a6146102835780638da5cb5b146102985780639f59dc7c146102b657600080fd5b80632dcb451f116100c65780632dcb451f146101be5780633ccfd60b1461020657806350b447121461021b57806354e3c24f1461025057600080fd5b80631209b1f6146100f85780631598165014610121578063272b0ee5146101435780632b08e82414610170575b600080fd5b34801561010457600080fd5b5061010e60025481565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b5061014161013c366004610c9d565b61034e565b005b34801561014f57600080fd5b5061016361015e366004610c9d565b610386565b6040516101189190610d51565b34801561017c57600080fd5b506101a661018b366004610c9d565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610118565b3480156101ca57600080fd5b506101de6003546004546005546006544794565b604080519586526020860194909452928401919091526060830152608082015260a001610118565b34801561021257600080fd5b50610141610427565b34801561022757600080fd5b5061023b610236366004610c9d565b6104f4565b60408051928352901515602083015201610118565b34801561025c57600080fd5b5061010e61026b366004610cb6565b610528565b61014161027e366004610c9d565b610559565b34801561028f57600080fd5b506101416105f5565b3480156102a457600080fd5b506000546001600160a01b03166101a6565b3480156102c257600080fd5b506102d66102d1366004610c74565b61062b565b6040516101189190610cd8565b3480156102ef57600080fd5b506102d66102fe366004610c9d565b610703565b34801561030f57600080fd5b5061010e60015481565b34801561032557600080fd5b5061010e610765565b34801561033a57600080fd5b50610141610349366004610c74565b6107a1565b6000546001600160a01b031633146103815760405162461bcd60e51b815260040161037890610d1c565b60405180910390fd5b600255565b61038e610b87565b600782815481106103a1576103a1610e3a565b60009182526020909120604080516101008101909152916003020181606081018260058282826020028201916000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116103d1575050509284525050506001820154602082015260029091015460ff16151560409091015292915050565b6000546001600160a01b031633146104515760405162461bcd60e51b815260040161037890610d1c565b600080546004546040516001600160a01b03909216918381818185875af1925050503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b505060006004559050806104f15760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610378565b50565b6007818154811061050457600080fd5b60009182526020909120600390910201600181015460029091015490915060ff1682565b6009602052816000526040600020818154811061054457600080fd5b90600052602060002001600091509150505481565b6002546105668234610db4565b146105ca5760405162461bcd60e51b815260206004820152602e60248201527f56616c756520676976656e20697320646966666572656e742066726f6d20746860448201526d65207469636b657420707269636560901b6064820152608401610378565b60005b818110156105f1576105df3382610839565b806105e981610ddf565b9150506105cd565b5050565b6000546001600160a01b0316331461061f5760405162461bcd60e51b815260040161037890610d1c565b6106296000610972565b565b6001600160a01b0381166000908152600a60205260408120546060919067ffffffffffffffff81111561066057610660610e50565b604051908082528060200260200182016040528015610689578160200160208202803683370190505b5090506000805b6007548110156106fa576000818152600860205260409020546001600160a01b03868116911614156106e857808383815181106106cf576106cf610e3a565b60209081029190910101526106e58260016109c2565b91505b806106f281610ddf565b915050610690565b50909392505050565b60008181526009602090815260409182902080548351818402810184019094528084526060939283018282801561075957602002820191906000526020600020905b815481526020019060010190808311610745575b50505050509050919050565b60006004546006546005546003544761077e9190610dc8565b6107889190610dc8565b6107929190610dc8565b61079c9190610dc8565b905090565b6000546001600160a01b031633146107cb5760405162461bcd60e51b815260040161037890610d1c565b6001600160a01b0381166108305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610378565b6104f181610972565b600154600061085061084b8484610d9c565b6109d5565b6040805160608101825282815260208101859052600091810182905260078054600181018255925280519293509160039091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801906108b39082906005610bae565b5060208201516001828101919091556040909201516002909101805460ff19169115159190911790556007546000916108ec9190610b7b565b600081815260086020908152604080832080546001600160a01b0319166001600160a01b038b169081179091558784526009835281842080546001818101835591865284862001869055908452600a9092529091205491925061094f91906109c2565b6001600160a01b039095166000908152600a602052604090209490945550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006109ce8284610d9c565b9392505050565b6109dd610c41565b6109e5610c41565b6000805b60058110156106fa5760006005815b82158015610a065750818111155b15610ada576040516bffffffffffffffffffffffff193360601b166020820152426034820152605481018590526074810182905260948101899052610a779060019060199060b4016040516020818303038152906040528051906020012060001c610a719190610dfa565b906109c2565b94506000805b6005811015610ac25786888260058110610a9957610a99610e3a565b602002015160ff161415610ab05760019150610ac2565b80610aba81610ddf565b915050610a7d565b508015935081610ad181610ddf565b925050506109f8565b818110610b445760405162461bcd60e51b815260206004820152603260248201527f4572726f722067656e65726174696e672072616e646f6d207469636b6574206e6044820152713ab6b132b939971026b0bc103932ba393c9760711b6064820152608401610378565b84868560058110610b5757610b57610e3a565b60ff909216602092909202015250829150610b73905081610ddf565b9150506109e9565b60006109ce8284610dc8565b6040518060600160405280610b9a610c41565b815260006020820181905260409091015290565b600183019183908215610c315791602002820160005b83821115610c0257835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610bc4565b8015610c2f5782816101000a81549060ff0219169055600101602081600001049283019260010302610c02565b505b50610c3d929150610c5f565b5090565b6040518060a001604052806005906020820280368337509192915050565b5b80821115610c3d5760008155600101610c60565b600060208284031215610c8657600080fd5b81356001600160a01b03811681146109ce57600080fd5b600060208284031215610caf57600080fd5b5035919050565b60008060408385031215610cc957600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610d1057835183529284019291840191600101610cf4565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b815160e08201908260005b6005811015610d7e57825160ff16825260209283019290910190600101610d5c565b505050602083015160a0830152604090920151151560c09091015290565b60008219821115610daf57610daf610e0e565b500190565b600082610dc357610dc3610e24565b500490565b600082821015610dda57610dda610e0e565b500390565b6000600019821415610df357610df3610e0e565b5060010190565b600082610e0957610e09610e24565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122057cbab518d0de5f5c4e2df7738ee4e6b35643f633e9b458d86665d9118d8137464736f6c63430008060033";

export class LotteryFactory__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LotteryFactory> {
    return super.deploy(overrides || {}) as Promise<LotteryFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LotteryFactory {
    return super.attach(address) as LotteryFactory;
  }
  connect(signer: Signer): LotteryFactory__factory {
    return super.connect(signer) as LotteryFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryFactoryInterface {
    return new utils.Interface(_abi) as LotteryFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LotteryFactory {
    return new Contract(address, _abi, signerOrProvider) as LotteryFactory;
  }
}
