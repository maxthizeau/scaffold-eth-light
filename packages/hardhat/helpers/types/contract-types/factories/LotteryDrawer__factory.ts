/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LotteryDrawer, LotteryDrawerInterface } from "../LotteryDrawer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "_getAllBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_getAllDraws",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint8[5]",
            name: "numbers",
            type: "uint8[5]",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "rewardBalanceAtDraw",
            type: "uint256",
          },
          {
            internalType: "uint256[6]",
            name: "rewardsByWinningNumber",
            type: "uint256[6]",
          },
          {
            internalType: "uint32[6]",
            name: "winnersByWinningNumber",
            type: "uint32[6]",
          },
          {
            internalType: "uint256",
            name: "startedAt",
            type: "uint256",
          },
        ],
        internalType: "struct LotteryDrawer.Draw[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_getCurrentDraw",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint8[5]",
            name: "numbers",
            type: "uint8[5]",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "rewardBalanceAtDraw",
            type: "uint256",
          },
          {
            internalType: "uint256[6]",
            name: "rewardsByWinningNumber",
            type: "uint256[6]",
          },
          {
            internalType: "uint32[6]",
            name: "winnersByWinningNumber",
            type: "uint32[6]",
          },
          {
            internalType: "uint256",
            name: "startedAt",
            type: "uint256",
          },
        ],
        internalType: "struct LotteryDrawer.Draw",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_drawId",
        type: "uint256",
      },
    ],
    name: "_getDraw",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint8[5]",
            name: "numbers",
            type: "uint8[5]",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "rewardBalanceAtDraw",
            type: "uint256",
          },
          {
            internalType: "uint256[6]",
            name: "rewardsByWinningNumber",
            type: "uint256[6]",
          },
          {
            internalType: "uint32[6]",
            name: "winnersByWinningNumber",
            type: "uint32[6]",
          },
          {
            internalType: "uint256",
            name: "startedAt",
            type: "uint256",
          },
        ],
        internalType: "struct LotteryDrawer.Draw",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_drawId",
        type: "uint256",
      },
    ],
    name: "_getDrawToTickets",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ticketId",
        type: "uint256",
      },
    ],
    name: "_getTicket",
    outputs: [
      {
        components: [
          {
            internalType: "uint8[5]",
            name: "numbers",
            type: "uint8[5]",
          },
          {
            internalType: "uint256",
            name: "drawNumber",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "claimed",
            type: "bool",
          },
        ],
        internalType: "struct LotteryFactory.Ticket",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "_getTicketsByOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "buyMultipleRandomTicket",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "drawToTickets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "draws",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "completed",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "rewardBalanceAtDraw",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newPrice",
        type: "uint256",
      },
    ],
    name: "setTicketPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ticketToOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tickets",
    outputs: [
      {
        internalType: "uint256",
        name: "drawNumber",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526611c37937e0800060025560006003556000600455600060055560006006553480156200003057600080fd5b506200003c33620001c2565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905287518087018952858152808501869052808901869052808401869052808301869052808201869052885160e081018a5286815289518084018b52878152808701889052808b0188905280860188905280850188905295810195865298890186905292880185905290870186905286018190524293860193909352600b805460018101825592528451600c9092027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db981019283559051939492936200015b917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba0190600562000212565b50604082015160028201805460ff1916911515919091179055606082015160038201556080820151620001959060048301906006620002ac565b5060a0820151620001ad90600a8301906006620002dd565b5060c082015181600b01555050505062000383565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001830191839082156200029a5791602002820160005b838211156200026957835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000229565b8015620002985782816101000a81549060ff021916905560010160208160000104928301926001030262000269565b505b50620002a89291506200036c565b5090565b82600681019282156200029a579160200282015b828111156200029a578251825591602001919060010190620002c0565b6001830191839082156200029a5791602002820160005b838211156200033a57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620002f4565b8015620002985782816101000a81549063ffffffff02191690556004016020816003010492830192600103026200033a565b5b80821115620002a857600081556001016200036d565b6115e480620003936000396000f3fe60806040526004361061011f5760003560e01c8063715018a6116100a0578063b12e29df11610064578063b12e29df14610391578063c6f6d9d9146103b1578063efff5e2f146103c7578063f2fde38b146103dc578063fbbad3cd146103fc57600080fd5b8063715018a6146102ef5780638da5cb5b146103045780639f52d8be146103225780639f59dc7c14610344578063ab35893d1461037157600080fd5b80632dcb451f116100e75780632dcb451f1461022a5780633ccfd60b1461027257806350b447121461028757806354e3c24f146102bc5780635d091f38146102dc57600080fd5b80630cc36c36146101245780631209b1f614610169578063159816501461018d578063272b0ee5146101af5780632b08e824146101dc575b600080fd5b34801561013057600080fd5b5061014461013f3660046112de565b61041e565b6040805194855292151560208501529183015260608201526080015b60405180910390f35b34801561017557600080fd5b5061017f60025481565b604051908152602001610160565b34801561019957600080fd5b506101ad6101a83660046112de565b61045b565b005b3480156101bb57600080fd5b506101cf6101ca3660046112de565b610493565b60405161016091906114b6565b3480156101e857600080fd5b506102126101f73660046112de565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610160565b34801561023657600080fd5b5061024a6003546004546005546006544794565b604080519586526020860194909452928401919091526060830152608082015260a001610160565b34801561027e57600080fd5b506101ad610534565b34801561029357600080fd5b506102a76102a23660046112de565b610601565b60408051928352901515602083015201610160565b3480156102c857600080fd5b5061017f6102d73660046112f7565b610635565b6101ad6102ea3660046112de565b610666565b3480156102fb57600080fd5b506101ad610702565b34801561031057600080fd5b506000546001600160a01b0316610212565b34801561032e57600080fd5b50610337610738565b60405161016091906114a7565b34801561035057600080fd5b5061036461035f3660046112ae565b61089e565b604051610160919061143a565b34801561037d57600080fd5b5061033761038c3660046112de565b610976565b34801561039d57600080fd5b506103646103ac3660046112de565b610ad2565b3480156103bd57600080fd5b5061017f60015481565b3480156103d357600080fd5b5061017f610b34565b3480156103e857600080fd5b506101ad6103f73660046112ae565b610b70565b34801561040857600080fd5b50610411610c08565b60405161016091906113eb565b600b818154811061042e57600080fd5b60009182526020909120600c90910201805460028201546003830154600b9093015491935060ff16919084565b6000546001600160a01b0316331461048e5760405162461bcd60e51b815260040161048590611472565b60405180910390fd5b600255565b61049b611154565b600782815481106104ae576104ae611582565b60009182526020909120604080516101008101909152916003020181606081018260058282826020028201916000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116104de575050509284525050506001820154602082015260029091015460ff16151560409091015292915050565b6000546001600160a01b0316331461055e5760405162461bcd60e51b815260040161048590611472565b600080546004546040516001600160a01b03909216918381818185875af1925050503d80600081146105ac576040519150601f19603f3d011682016040523d82523d6000602084013e6105b1565b606091505b505060006004559050806105fe5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610485565b50565b6007818154811061061157600080fd5b60009182526020909120600390910201600181015460029091015490915060ff1682565b6009602052816000526040600020818154811061065157600080fd5b90600052602060002001600091509150505481565b60025461067382346114fc565b146106d75760405162461bcd60e51b815260206004820152602e60248201527f56616c756520676976656e20697320646966666572656e742066726f6d20746860448201526d65207469636b657420707269636560901b6064820152608401610485565b60005b818110156106fe576106ec3382610e04565b806106f681611527565b9150506106da565b5050565b6000546001600160a01b0316331461072c5760405162461bcd60e51b815260040161048590611472565b6107366000610f3d565b565b61074061117b565b600b805461074f906001610f8d565b8154811061075f5761075f611582565b60009182526020918290206040805160e081018252600c90930290910180548352815160a0810190925291928301906001830160058282826020028201916000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116107a157505050928452505050600282015460ff16151560208201526003820154604080830191909152805160c081019182905260609092019190600484019060069082845b81548152602001906001019080831161080f5750505091835250506040805160c081019182905260209092019190600a840190600690826000855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161084a57905050505050508152602001600b82015481525050905090565b6001600160a01b0381166000908152600a60205260408120546060919067ffffffffffffffff8111156108d3576108d3611598565b6040519080825280602002602001820160405280156108fc578160200160208202803683370190505b5090506000805b60075481101561096d576000818152600860205260409020546001600160a01b038681169116141561095b578083838151811061094257610942611582565b6020908102919091010152610958826001610fa2565b91505b8061096581611527565b915050610903565b50909392505050565b61097e61117b565b600b828154811061099157610991611582565b60009182526020918290206040805160e081018252600c90930290910180548352815160a0810190925291928301906001830160058282826020028201916000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109d357505050928452505050600282015460ff16151560208201526003820154604080830191909152805160c081019182905260609092019190600484019060069082845b815481526020019060010190808311610a415750505091835250506040805160c081019182905260209092019190600a840190600690826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610a7c57905050505050508152602001600b820154815250509050919050565b600081815260096020908152604091829020805483518184028101840190945280845260609392830182828015610b2857602002820191906000526020600020905b815481526020019060010190808311610b14575b50505050509050919050565b600060045460065460055460035447610b4d9190611510565b610b579190611510565b610b619190611510565b610b6b9190611510565b905090565b6000546001600160a01b03163314610b9a5760405162461bcd60e51b815260040161048590611472565b6001600160a01b038116610bff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610485565b6105fe81610f3d565b600b5460609060009067ffffffffffffffff811115610c2957610c29611598565b604051908082528060200260200182016040528015610c6257816020015b610c4f61117b565b815260200190600190039081610c475790505b5090506000805b600b54811015610dfc57600b8181548110610c8657610c86611582565b60009182526020918290206040805160e081018252600c90930290910180548352815160a0810190925291928301906001830160058282826020028201916000905b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411610cc857505050928452505050600282015460ff16151560208201526003820154604080830191909152805160c081019182905260609092019190600484019060069082845b815481526020019060010190808311610d365750505091835250506040805160c081019182905260209092019190600a840190600690826000855b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610d7157905050505050508152602001600b82015481525050838381518110610dd257610dd2611582565b6020908102919091010152610de8826001610fa2565b915080610df481611527565b915050610c69565b509092915050565b6001546000610e1b610e1684846114e4565b610fae565b6040805160608101825282815260208101859052600091810182905260078054600181018255925280519293509160039091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190610e7e90829060056111ca565b5060208201516001828101919091556040909201516002909101805460ff1916911515919091179055600754600091610eb79190610f8d565b600081815260086020908152604080832080546001600160a01b0319166001600160a01b038b169081179091558784526009835281842080546001818101835591865284862001869055908452600a90925290912054919250610f1a9190610fa2565b6001600160a01b039095166000908152600a602052604090209490945550505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610f998284611510565b90505b92915050565b6000610f9982846114e4565b610fb661125d565b610fbe61125d565b6000805b600581101561096d5760006005815b82158015610fdf5750818111155b156110b3576040516bffffffffffffffffffffffff193360601b1660208201524260348201526054810185905260748101829052609481018990526110509060019060199060b4016040516020818303038152906040528051906020012060001c61104a9190611542565b90610fa2565b94506000805b600581101561109b578688826005811061107257611072611582565b602002015160ff161415611089576001915061109b565b8061109381611527565b915050611056565b5080159350816110aa81611527565b92505050610fd1565b81811061111d5760405162461bcd60e51b815260206004820152603260248201527f4572726f722067656e65726174696e672072616e646f6d207469636b6574206e6044820152713ab6b132b939971026b0bc103932ba393c9760711b6064820152608401610485565b8486856005811061113057611130611582565b60ff90921660209290920201525082915061114c905081611527565b915050610fc2565b604051806060016040528061116761125d565b815260006020820181905260409091015290565b6040518060e001604052806000815260200161119561125d565b815260006020820181905260408201526060016111b061127b565b81526020016111bd61127b565b8152602001600081525090565b60018301918390821561124d5791602002820160005b8382111561121e57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026111e0565b801561124b5782816101000a81549060ff021916905560010160208160000104928301926001030261121e565b505b50611259929150611299565b5090565b6040518060a001604052806005906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b5b80821115611259576000815560010161129a565b6000602082840312156112c057600080fd5b81356001600160a01b03811681146112d757600080fd5b9392505050565b6000602082840312156112f057600080fd5b5035919050565b6000806040838503121561130a57600080fd5b50508035926020909101359150565b8060005b600681101561134257815163ffffffff1684526020938401939091019060010161131d565b50505050565b8060005b600581101561134257815160ff1684526020938401939091019060010161134c565b8051825260208082015161138482850182611348565b506040820151151560c0840152606082015160e08401526080820151610100840160005b60068110156113c5578251825291830191908301906001016113a8565b5050505060a08101516113dc6101c0840182611319565b5060c001516102809190910152565b6020808252825182820181905260009190848201906040850190845b8181101561142e5761141a83855161136e565b928401926102a09290920191600101611407565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561142e57835183529284019291840191600101611456565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6102a08101610f9c828461136e565b600060e0820190506114c9828451611348565b602083015160a0830152604090920151151560c09091015290565b600082198211156114f7576114f7611556565b500190565b60008261150b5761150b61156c565b500490565b60008282101561152257611522611556565b500390565b600060001982141561153b5761153b611556565b5060010190565b6000826115515761155161156c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122047720fa5f1dc28725f8cd91e739024c7644312e6980bfcb1eae7b033e465f72164736f6c63430008060033";

export class LotteryDrawer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LotteryDrawer> {
    return super.deploy(overrides || {}) as Promise<LotteryDrawer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LotteryDrawer {
    return super.attach(address) as LotteryDrawer;
  }
  connect(signer: Signer): LotteryDrawer__factory {
    return super.connect(signer) as LotteryDrawer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryDrawerInterface {
    return new utils.Interface(_abi) as LotteryDrawerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LotteryDrawer {
    return new Contract(address, _abi, signerOrProvider) as LotteryDrawer;
  }
}
